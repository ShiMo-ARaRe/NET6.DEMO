<?xml version="1.0" encoding="utf-8" ?>
<!--
xmlns 这是默认命名空间声明，指定了 NLog 配置文件所使用的 XML 命名空间。在这种情况下，它指定了 http://www.nlog-project.org/schemas/NLog.xsd 作为默认命名空间。

xmlns:xsi 这是另一个命名空间声明，定义了 XML Schema 实例命名空间的前缀 xsi。它指定了 http://www.w3.org/2001/XMLSchema-instance 作为该命名空间的 URI。

xsi:schemaLocation 这是用于指定 XML Schema 位置的属性。它告诉解析器在需要验证配置文件结构时，可以在 http://www.nlog-project.org/schemas/NLog.xsd 上找到相应的 XML Schema 定义文件 NLog.xsd。
-->
<!--连接失败时善用这些全局设置，也许能帮你解决问题！-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log">
	<!--autoReload 这是一个全局设置，指定 NLog 配置文件是否应该自动重新加载。如果将其设置为 true，则当配置文件发生更改时，
	NLog 将自动重新加载配置。这对于动态修改配置而无需重新启动应用程序非常有用。-->
	<!--throwExceptions 这是另一个全局设置，指定是否应该在发生错误时抛出异常。如果将其设置为 false，// 如果设置成true，那就是一点毛病都不放过
	则 NLog 将不会抛出异常，而是尝试继续正常运行，并将错误信息记录到日志中。-->
	<!--internalLogLevel 这是内部日志记录级别的设置。它指定了 NLog 内部日志记录的级别。在这种情况下，将其设置为 Off 表示禁用内部日志记录。
		设置为Error的话可以开启NLog的内部日志来查看是否有任何错误。// 找毛病时非常有效！
	-->
	<!--internalLogFile  这是内部日志记录文件的路径设置。它指定了 NLog 内部日志记录的输出文件路径。
	在这里，它设置为 c:\temp\nlog-internal.log，表示将内部日志记录写入到 c:\temp 目录下的 nlog-internal.log 文件中。-->


	<!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->

	<!--这将使用变量 myvar 的值作为文件名的一部分，生成名为 myvalue.log 的日志文件。
	通过使用变量，您可以集中管理配置的值，并且如果需要更改，只需修改变量的定义即可，而无需在整个配置文件中查找和替换多个实例。-->
	<variable name="myvar" value="myvalue"/>

	<!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
	<targets>		<!--target的意思是目标-->


		<!--数据库连接失败？
		是的，你的问题确实出在这里。这个错误表明NLog无法识别Database这个目标类型。
		这通常是因为NLog.Database扩展没有被正确地包含在项目中。
		你需要确保你的项目已经安装了NLog.Database包。你可以通过NuGet包管理器来安装这个包。-->

		<!--如果出现证书链是由不受信任的颁发机构颁发的,那就把Encrypt=True给删了！	这东西表示启用加密功能。-->
		<target name="AllDatabase" xsi:type="Database"
			  dbProvider="System.Data.SqlClient.SqlConnection,System.Data.SqlClient"
				connectionString="Data Source=霜霰;Initial Catalog=LogManager;Persist Security Info=True;User ID=sa;Password=feizhijie23;"
			  commandText="insert into dbo.NLog (Application, Logged, Level, Message,Logger, CallSite, Exception) values (@Application, @Logged, @Level, @Message,@Logger, @Callsite, @Exception);">
			<parameter name="@application" layout="AspNetCoreNlog" />
			<parameter name="@logged" layout="${date}" />
			<parameter name="@level" layout="${level}" />
			<parameter name="@message" layout="${message}" />
			<parameter name="@logger" layout="${logger}" />
			<parameter name="@callSite" layout="${callsite:filename=true}" />
			<parameter name="@exception" layout="${exception:tostring}" />
		</target>

		<!--fileName指定了日志文件的路径和名称。${shortdate} 是一个日期格式化参数，它将在文件名中插入当前日期。
		这将生成一个每天都有不同日志文件的方式，以确保日志文件的分隔和归档。-->
		<!--layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}": 定义了日志消息的格式。
		${longdate} 表示完整的日期和时间，${logger} 表示日志记录器的名称，
		${uppercase:${level}} 表示将日志级别转换为大写，${message} 表示日志消息的内容，${exception} 表示异常信息（如果有）。-->
		<target xsi:type="File" name="allfile" fileName="NLog\nlog-all-${shortdate}.log"
				layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}" />


		<!--同样是将文件写入日志中，写入的内容有所差别，差别在layout属性中体现。写入日志的数量有差别，差别在路由逻辑中体现-->

		<!--日志记录器的 "ownFile-web" 目标是一个文件目标，它使用 NLog 框架中的 File 目标类型。
		name="ownFile-web": 目标的名称为 "ownFile-web"，用于在日志记录器中标识目标。
		fileName="NLog\nlog-my-${shortdate}.log": 指定了日志文件的路径和名称。${shortdate} 是一个日期格式化参数，
		它将在文件名中插入当前日期。这将生成一个每天都有不同日志文件的方式，以确保日志文件的分隔和归档。
		layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}": 定义了日志消息的格式。
		${longdate} 表示完整的日期和时间，${logger} 表示日志记录器的名称，
		${uppercase:${level}} 表示将日志级别转换为大写，${message} 表示日志消息的内容，${exception} 表示异常信息（如果有）。-->
		<target xsi:type="File" name="ownFile-web" fileName="NLog\nlog-my-${shortdate}.log"
				 layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}" />


		<!--"blackhole" 是一个空目标，它使用 NLog 框架中的 Null 目标类型。该目标配置了以下属性：
		name="blackhole": 目标的名称为 "blackhole"，用于在日志记录器中标识目标。
		"Null" 目标是一个特殊的目标类型，它不会将日志消息写入任何地方，而是将其丢弃。
		这在某些情况下可能是有用的，当你不希望将某些特定级别或类型的日志消息记录下来时，可以使用 "blackhole" 目标。-->
		<target xsi:type="Null" name="blackhole" />
		<!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
	</targets>

	<rules>
		<!-- 在这里添加日志规则 -->

		<!--日志记录器被配置为将所有级别为 Debug 及更高级别的日志消息写入名为 "AllDatabase" 的目标中。-->
		<logger name="*" minlevel="debug" writeTo="AllDatabase" />

		<!-- 所有日志，包括来自微软的日志 -->

		<!--路由顺序会对日志打印产生影响。路由匹配逻辑为顺序匹配。-->
		<!--日志记录器被配置为将所有级别为 Trace 及更高级别的日志消息写入名为 "allfile" 的目标中。-->
		<logger name="*" minlevel="Trace" writeTo="allfile" />

		<!-- 跳过微软日志，只记录自己的日志 -->
		<!--以Microsoft打头的日志将进入此路由，由于此路由没有writeTo属性，所以会被忽略-->
		<!--且此路由设置了final，所以当此路由被匹配到时。不会再匹配此路由下面的路由。未匹配到此路由时才会继续匹配下一个路由-->
		<logger name="Microsoft.*" minlevel="Trace"  final="true" />
		<!--上方已经过滤了所有Microsoft.*的日志，所以此处的日志只会打印除Microsoft.*外的日志-->
		<logger name="*" minlevel="Trace" writeTo="ownFile-web" />

		<!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
	</rules>
</nlog>
