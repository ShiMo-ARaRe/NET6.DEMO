<?xml version="1.0" encoding="utf-8"?>
<log4net>
	
	<!-- 定义一些输出附加器 -->
	
	
	<!--name：指定附加器的名称。ype：指定附加器的类型。
	在这个例子中，附加器的类型是 "log4net.Appender.RollingFileAppender"，表示使用 log4net 提供的基于文件滚动的日志附加器。-->
	<!-- 本项生成的日志文件目录为 D:\C#\NET6-WebApi\NET6.DEMO\NET6.DEMO.WebApi\bin\Debug\net6.0\log4-->
	<appender name="rollingAppender" type="log4net.Appender.RollingFileAppender">
		<!-- 日志文件的路径 -->
		<file value="log4\log.txt" />

		<!-- 是否在现有日志文件后追加内容，而不是覆盖原有内容 -->
		<appendToFile value="true" />

		<!-- 设置文件锁定模型以防止在多线程环境中写入日志时出现问题 -->
		<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />

		<!-- 设置滚动日志的方式，可以是：只滚动一次（Once）、根据文件大小滚动（Size）、根据日期滚动（Date）或者大小和日期的组合（Composite） -->
		<rollingStyle value="Composite" />

		<!-- 当备份文件时，为文件名加的后缀 -->
		<datePattern value="yyyyMMdd.TXT" />

		<!-- 设置日志文件的最大个数 -->
		<maxSizeRollBackups value="20" />

		<!-- 设置单个日志文件的最大大小 -->
		<maximumFileSize value="3MB" />

		<!-- 如果为true，当前最新的日志文件名永远为file节中的名字，即log.txt -->
		<staticLogFileName value="true" />

		<!-- 设置日志的输出级别 -->
		<filter type="log4net.Filter.LevelRangeFilter">
			<!-- 输出的最小级别 -->
			<param name="LevelMin" value="ALL" />
			<!-- 输出的最大级别 -->
			<param name="LevelMax" value="FATAL" />
		</filter>
		<!--这个配置指定了一个日志过滤器，该过滤器允许所有级别的日志消息通过，但只输出 FATAL 级别及以下的日志消息。
		换句话说，只有 FATAL、ERROR、WARN 和 INFO 级别的日志消息将被输出，而 DEBUG 级别的日志消息将被忽略。
		为什么子记录器设置的最小级别是ALL，而输出的最小级别却是INFO，因为对于子记录器来说，如果根记录器设置了<level value="INFO"/>，
		它会继承根记录器的级别，并且无法通过子记录器的配置来改变。
		无论子记录器的配置是<param name="LevelMin" value="ALL" />还是其他级别，它都会受限于根记录器的级别。
		-->

		<!-- 设置日志的布局 -->
		<layout type="log4net.Layout.PatternLayout">
			<!-- 设置日志的输出格式 -->
			<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>
		</layout>
	</appender>


	<!--SqlServer形式-->
	<!--log4net日志配置：http://logging.apache.org/log4net/release/config-examples.html -->
	
	<!--name：指定附加器的名称。type：指定附加器的类型。
	在这个例子中，附加器的类型是 "log4net.Appender.AdoNetAppender"，表示使用 log4net 提供的 ADO.NET 日志附加器。-->
	<appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender">
		<!-- 日志缓存写入条数，设置为0时只要有一条就立刻写到数据库 -->
		<bufferSize value="0" />

		<!-- 数据库连接类型 -->
		<!--System.Data.SqlClient.SqlConnection 是 .NET Framework 中用于与 SQL Server 数据库建立连接的类。-->
		<!--注意！！！需要安装System.Data.SqlClient包-->
		<!--System.Data.SqlClient 是连接类型所在的命名空间-->
		<!--Version=4.6.1.3 指定了连接类型的版本号-->
		<!--Culture=neutral 指定了连接类型的区域设置为中性-->
		<!--PublicKeyToken=b03f5f7f11d50a3a 是连接类型的公钥令牌。-->
		<connectionType value="System.Data.SqlClient.SqlConnection,System.Data.SqlClient, Version=4.6.1.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />


		<!-- 连接教程 https://www.bilibili.com/video/BV19J4m187qQ?t=276.6&p=21-->
		<!-- 数据库连接字符串 -->
		<!--Data Source：指定数据库服务器的名称或网络地址。
		在这个例子中，服务器名称是 PC-202206030027。您需要将服务器名称替换为目标数据库服务器的名称或网络地址。-->
		<!--Initial Catalog：指定要连接的数据库的名称。在这个例子中，数据库名称是 LogManager。您需要将数据库名称替换为目标数据库的名称。-->
		<!--Persist Security Info属性的意思是表示是否保存安全信息，其实可以简单的理解为"ADO在数据库连接成功后是否保存密码信息"，-->
		<!--User ID：指定用于身份验证的用户名。Password：指定用于身份验证的密码。-->
		<!--Trust Server Certificate=True表示信任服务器证书，但是这个关键字在某些数据库中是不被支持的，也就是说加上你就会报错！-->
		<!--<connectionString value="Data Source=霜霰;Initial Catalog=LogManager;Persist Security Info=True;User ID=sa;Password=feizhijie23;Trust Server Certificate=True" />-->
		<connectionString value="Data Source=霜霰;Initial Catalog=LogManager;Persist Security Info=True;User ID=sa;Password=feizhijie23" />


		<!-- SQL命令，用于将日志插入数据库 -->
		<commandText value="INSERT INTO Log4Net ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />

		<!--
			@log_date：表示日志的日期。这个参数用于向表格的 [Date] 列插入日期值。

			@thread：表示日志的线程。这个参数用于向表格的 [Thread] 列插入线程信息。

			@log_level：表示日志的级别。这个参数用于向表格的 [Level] 列插入日志级别。

			@logger：表示日志的记录器（Logger）。这个参数用于向表格的 [Logger] 列插入日志记录器的名称。

			@message：表示日志的消息内容。这个参数用于向表格的 [Message] 列插入日志消息的文本。

			@exception：表示日志的异常信息。这个参数用于向表格的 [Exception] 列插入异常的详细信息。
		-->
		
		<!-- 下面的parameter节点定义了各个参数的名称、类型、大小以及布局 -->
		<parameter>
			<!--指定参数的名称，该参数用于表示日志的日期。在这里，参数名称是 @log_date。-->
			<parameterName value="@log_date" />
			<!--指定参数的数据库类型，这里是 DateTime，表示日期时间类型。-->
			<dbType value="DateTime" />
			<!--指定参数值的布局（Layout），这里使用 RawTimeStampLayout，它将日期时间值作为原始时间戳字符串。-->
			<layout type="log4net.Layout.RawTimeStampLayout" />
		</parameter>
		<parameter>
			<!--指定参数的名称，该参数用于表示日志的线程信息。-->
			<parameterName value="@thread" />
			<!--指定参数的数据库类型，这里是 String，表示字符串类型。-->
			<dbType value="String" />
			<!--指定参数值的最大长度，这里是 255。-->
			<size value="255" />
			<!--指定参数值的布局，这里使用 PatternLayout，它根据指定的模式将线程信息转换为字符串。-->
			<layout type="log4net.Layout.PatternLayout">
				<!--指定线程信息的转换模式，%thread 表示将线程信息作为字符串。-->
				<conversionPattern value="%thread" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@log_level" />
			<dbType value="String" />
			<size value="50" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%level" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@logger" />
			<dbType value="String" />
			<size value="255" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%logger" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@message" />
			<dbType value="String" />
			<size value="4000" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%message" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@exception" />
			<dbType value="String" />
			<size value="2000" />
			<layout type="log4net.Layout.ExceptionLayout" />
		</parameter>
	</appender>


	<root>

		<!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->
		<!--OFF:0	最高级别，表示关闭日志记录，不输出任何日志消息。-->
		<!--FATAL:FATAL		致命级别，用于输出严重的错误消息，表示发生了无法恢复的致命错误，程序可能无法继续执行。-->
		<!--ERROR: ERROR,FATAL	错误级别，用于输出错误消息，表示发生了可恢复的错误，可能导致程序功能受损或产生异常行为。-->
		<!--WARN: WARN,ERROR,FATAL	警告级别，用于输出警告性消息，表示潜在的问题或意外情况，但不会导致程序中断或失败。-->
		<!--INFO: INFO,WARN,ERROR,FATAL	信息级别，用于输出一般的信息性消息，表示程序运行中的一些重要事件或状态。-->
		<!--DEBUG: INFO,WARN,ERROR,FATAL	调试级别，用于输出详细的调试信息，通常用于开发和调试阶段。-->
		<!--ALL: DEBUG,INFO,WARN,ERROR,FATAL	最低级别，表示输出所有日志消息。--> 
		<priority value="ALL"/>
		<!--这里设置了根日志记录器的优先级。优先级定义了日志消息的最低级别，低于该级别的日志消息将被忽略。
		在这个例子中，设置为 "ALL"，表示输出所有级别的日志消息。-->

		<level value="INFO"/>
		<!--这里设置了根日志记录器的级别。级别定义了根日志记录器本身的日志消息级别，以控制输出到附加器的日志消息级别。
		在这个例子中，设置为 "INFO"，表示只输出 INFO 级别及以上的日志消息。
		由于根日志记录器是顶级记录器，因此设置了级别后，它将 "影响所有子记录器" 的日志消息级别。-->

		<appender-ref ref="rollingAppender" />
		<!--这里将名为 "rollingAppender" 的输出附加器添加到根日志记录器中。
		这表示根日志记录器将把日志消息输出到 "rollingAppender" 附加器中。-->
		
		<!--	ref指定附加器名称	-->
		<appender-ref ref="AdoNetAppender_SqlServer" />
		
	</root>
</log4net>
